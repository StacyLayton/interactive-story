{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","e","Audio","target","dataset","sound","play","react_default","a","createElement","className","src","alt","style","width","onClick","this","playInstrument","data-sound","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCkEzBC,sMA7DEC,GACK,IAAIC,MAAMD,EAAEE,OAAOC,QAAQC,OACjCC,wCAIZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,uCACTC,IAAI,aAAaC,MAAO,CAACC,MAAM,UAC/BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,qCAIJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBK,QAASC,KAAKC,gBAC/CV,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oCACTC,IAAI,YAAYF,UAAU,UAC1BH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,0CAA0CO,aAAW,IAC9DN,IAAI,kBAAkBF,UAAU,UAChCH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,kCAAkCO,aAAW,IACtDN,IAAI,kBAAiBF,UAAU,UAC/BH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gCAAgCO,aAAW,kBACpDN,IAAI,kBAAiBF,UAAU,UAC/BH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gCAAgCO,aAAW,IACpDN,IAAI,QAAQF,UAAU,UACtBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mCAAmCO,aAAW,qBACvDN,IAAI,WAAWF,UAAU,UACzBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,+BAA+BO,aAAW,uBACnDN,IAAI,OAAOF,UAAU,UACrBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,sCACTC,IAAI,cAAcF,UAAU,UAC5BH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,+BACTC,IAAI,OAAOF,UAAU,UACrBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mCAAmCO,aAAW,qBACvDN,IAAI,WAAWF,UAAU,UACzBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oDAAoDO,aAAW,6BACxEN,IAAI,kBAAkBF,UAAU,UAChCH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oCACTC,IAAI,YAAYF,UAAU,UAC1BH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mCAAmCO,aAAW,sBACvDN,IAAI,WAAWF,UAAU,UACzBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,kCACTC,IAAI,UAAUF,UAAU,UACxBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,+BAA+BO,aAAW,iBACnDN,IAAI,OAAOF,UAAU,UACrBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gCAAgCO,aAAW,kBACpDN,IAAI,QAAQF,UAAU,UACtBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,iCACTC,IAAI,SAASF,UAAU,UACvBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oCAAoCO,aAAW,uBACxDN,IAAI,YAAYF,UAAU,mBArDpBS,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a4ff08f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  playInstrument(e) {\n    var prettySound = new Audio(e.target.dataset.sound);\n    prettySound.play();\n  }\n\n  render() {\n    return (\n      <div className=\"App scrollbar\">\n          <div className=\"container\">\n            <img src=\"backgrounds/musicRoomBackground3.png\" \n            alt=\"Music Room\" style={{width:\"100%\"}} />\n            <div className=\"text-block\">\n              <h3>Pick your instrument!</h3>\n            </div>\n          </div>\n\n          <div className=\"scrolling-wrapper\" onClick={this.playInstrument}>\n            <img src=\"pics/Instruments/TN_accordion.jpg\" \n            alt=\"accordion\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_acoustic_guitar.jpg\" data-sound=\" \" \n            alt=\"acoustic_guitar\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_bagpipe.jpg\" data-sound=\" \" \n            alt=\"acoustic_guitar\"className=\"input\" />\n            <img src=\"pics/Instruments/TN_banjo.jpg\" data-sound=\"music/banjo.mp3\" \n            alt=\"acoustic_guitar\"className=\"input\" />\n            <img src=\"pics/Instruments/TN_cello.jpg\" data-sound=\" \" \n            alt=\"cello\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_clarinet.jpg\" data-sound=\"music/clarinet.mp3\" \n            alt=\"clarinet\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_drum.jpg\" data-sound=\"music/snare-drum.mp3\"\n            alt=\"drum\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_french_horn.jpg\" \n            alt=\"french_horn\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_harp.jpg\" \n            alt=\"harp\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_keyboard.jpg\" data-sound=\"music/keyboard.wav\"\n            alt=\"keyboard\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_red-color-electric-guitar.jpg\" data-sound=\"music/electric-guitar1.wav\"\n            alt=\"electric-guitar\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_saxophone.jpg\" \n            alt=\"saxophone\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_trombone.jpg\" data-sound=\"music/trombone2.mp3\"\n            alt=\"trombone\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_trumpet.jpg\" \n            alt=\"trumpet\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_tuba.jpg\" data-sound=\"music/tuba.mp3\"\n            alt=\"tuba\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_viola.jpg\" data-sound=\"music/viola.mp3\"\n            alt=\"viola\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_violin.jpg\" \n            alt=\"violin\" className=\"input\" />\n            <img src=\"pics/Instruments/TN_xylophone.jpg\" data-sound=\"music/xylophone1.wav\"\n            alt=\"xylophone\" className=\"input\" />\n          </div>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}